using System.Text.Json;
using System.Text.Json.Serialization;
using Common.Api;
using Common.Api.Swagger;
using LinqToDB;
using LinqToDB.AspNet;
using LinqToDB.AspNet.Logging;
using Microsoft.AspNetCore.Mvc.Infrastructure;
using Microsoft.OpenApi.Models;
using Root.dal;
using Scalar.AspNetCore;
using Serilog;

var builder = WebApplication.CreateBuilder(args);

// üì° Add services to the container.
builder.Services.AddControllers();

var dbConnectionString = builder.Configuration.GetConnectionString("Default") ?? string.Empty;

// Add services to the container.
// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi
builder.Services.AddOpenApi();

#region üìö API DOCUMENTATION

// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi
// TODO: –ø–æ–∫–∞ –Ω–µ—Ç —á—Ç–µ–Ω–∏—è xml –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ https://devblogs.microsoft.com/dotnet/dotnet9-openapi/ –∏—Å–∫–∞—Ç—å –ø–æ –∫–ª—é—á—É xml
// builder.Services.AddOpenApi();
builder.Services.AddSwaggerGen(opt =>
{
    // TODO: –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏–π api –∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—Å–∏–∏ —Å–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç.
    opt.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "BOOKING API",
        Description = "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ api",
    });

    opt.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Description = "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        Name = "Authorization",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.Http,
        Scheme = "Bearer"
    });

    opt.UseDefaultConfig();
});

// JSON ENUM FOR IRESULT
// –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ –∏ –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
// https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/2293
builder.Services.Configure<Microsoft.AspNetCore.Http.Json.JsonOptions>(options =>
{
    // –≠—Ç–æ —á—Ç–æ –±—ã IResults enmus —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–ª–∏—Å—å.
    options.SerializerOptions.Converters.Add(new JsonStringEnumConverter(namingPolicy: JsonNamingPolicy.CamelCase));
}).Configure<Microsoft.AspNetCore.Mvc.JsonOptions>(options =>
{
    // –≠—Ç–æ —á—Ç–æ –±—ã swagger –≤–∏–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
    options.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter(namingPolicy: JsonNamingPolicy.CamelCase));
});

#endregion

#region üì¶ DB

// TODO: –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –Ω—É–∂–Ω–æ –∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å.
builder.Services.AddLinqToDBContext<Rootdb>((provider, options)
    => options
       .UsePostgreSQL(dbConnectionString)
       .UseMappingSchema(Rootdb.Schema())
       .UseDefaultLogging(provider));

#endregion

#region ‚ùå ERRORS

builder.Services.AddTransient<ProblemDetailsFactory, CustomProblemDetailsFactory>();
builder.Services.AddProblemDetails();

#endregion

#region üìú LOGS

builder.Services.AddHttpContextAccessor(); // —ç—Ç–æ –¥–ª—è correlation-id (https://github.com/ekmsystems/serilog-enrichers-correlation-id)
builder.Host
       .UseSerilog((context, configuration) => configuration.ReadFrom.Configuration(context.Configuration));

#endregion


#region üîÑ PIPLINE

var app = builder.Build();

if (app.Environment.IsDevelopment() || app.Environment.IsEnvironment("DevelopmentContainer")
                                    || app.Environment.IsEnvironment("DevelopmentContainerFrontend"))
{
    // TODO: –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
    // –ø–æ–∫–∞ –Ω–µ—Ç —á—Ç–µ–Ω–∏—è xml –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ https://devblogs.microsoft.com/dotnet/dotnet9-openapi/ –∏—Å–∫–∞—Ç—å –ø–æ –∫–ª—é—á—É xml
    // app.MapOpenApi();
    app.UseSwagger(options => { options.RouteTemplate = "/openapi/{documentName}.json"; });
    app.UseSwaggerUI(options => { options.SwaggerEndpoint("/openapi/v1.json", "booking"); });
    app.MapScalarApiReference();
}

// ‚ùå ERRORS
app.UseExceptionHandler();

app.UseHttpsRedirection();

app.MapControllers();

#endregion

app.Run();